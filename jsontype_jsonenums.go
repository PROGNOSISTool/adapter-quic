// generated by jsonenums -type=JSONType; DO NOT EDIT

package quictracker

import (
	"encoding/json"
	"fmt"
)

var (
	_JSONTypeNameToValue = map[string]JSONType{
		"InitialPacketJSON":            InitialPacketJSON,
		"RetryPacketJSON":              RetryPacketJSON,
		"StatelessResetPacketJSON":     StatelessResetPacketJSON,
		"VersionNegotiationPacketJSON": VersionNegotiationPacketJSON,
		"HandshakePacketJSON":          HandshakePacketJSON,
		"ProtectedPacketJSON":          ProtectedPacketJSON,
		"ZeroRTTProtectedPacketJSON":   ZeroRTTProtectedPacketJSON,
		"ShortHeaderJSON":              ShortHeaderJSON,
		"LongHeaderJSON":               LongHeaderJSON,
		"PaddingFrameJSON":             PaddingFrameJSON,
		"PingFrameJSON":                PingFrameJSON,
		"AckFrameJSON":                 AckFrameJSON,
		"AckECNFrameJSON":              AckECNFrameJSON,
		"ResetStreamJSON":              ResetStreamJSON,
		"StopSendingFrameJSON":         StopSendingFrameJSON,
		"CryptoFrameJSON":              CryptoFrameJSON,
		"NewTokenFrameJSON":            NewTokenFrameJSON,
		"StreamFrameJSON":              StreamFrameJSON,
		"MaxDataFrameJSON":             MaxDataFrameJSON,
		"MaxStreamsFrameJSON":          MaxStreamsFrameJSON,
		"MaxStreamDataFrameJSON":       MaxStreamDataFrameJSON,
		"DataBlockedFrameJSON":         DataBlockedFrameJSON,
		"StreamDataBlockedFrameJSON":   StreamDataBlockedFrameJSON,
		"StreamsBlockedFrameJSON":      StreamsBlockedFrameJSON,
		"NewConnectionIdFrameJSON":     NewConnectionIdFrameJSON,
		"RetireConnectionIdJSON":       RetireConnectionIdJSON,
		"PathChallengeJSON":            PathChallengeJSON,
		"PathResponseJSON":             PathResponseJSON,
		"ConnectionCloseFrameJSON":     ConnectionCloseFrameJSON,
		"ApplicationCloseFrameJSON":    ApplicationCloseFrameJSON,
		"HandshakeDoneFrameJSON":       HandshakeDoneFrameJSON,
	}

	_JSONTypeValueToName = map[JSONType]string{
		InitialPacketJSON:            "InitialPacketJSON",
		RetryPacketJSON:              "RetryPacketJSON",
		StatelessResetPacketJSON:     "StatelessResetPacketJSON",
		VersionNegotiationPacketJSON: "VersionNegotiationPacketJSON",
		HandshakePacketJSON:          "HandshakePacketJSON",
		ProtectedPacketJSON:          "ProtectedPacketJSON",
		ZeroRTTProtectedPacketJSON:   "ZeroRTTProtectedPacketJSON",
		ShortHeaderJSON:              "ShortHeaderJSON",
		LongHeaderJSON:               "LongHeaderJSON",
		PaddingFrameJSON:             "PaddingFrameJSON",
		PingFrameJSON:                "PingFrameJSON",
		AckFrameJSON:                 "AckFrameJSON",
		AckECNFrameJSON:              "AckECNFrameJSON",
		ResetStreamJSON:              "ResetStreamJSON",
		StopSendingFrameJSON:         "StopSendingFrameJSON",
		CryptoFrameJSON:              "CryptoFrameJSON",
		NewTokenFrameJSON:            "NewTokenFrameJSON",
		StreamFrameJSON:              "StreamFrameJSON",
		MaxDataFrameJSON:             "MaxDataFrameJSON",
		MaxStreamsFrameJSON:          "MaxStreamsFrameJSON",
		MaxStreamDataFrameJSON:       "MaxStreamDataFrameJSON",
		DataBlockedFrameJSON:         "DataBlockedFrameJSON",
		StreamDataBlockedFrameJSON:   "StreamDataBlockedFrameJSON",
		StreamsBlockedFrameJSON:      "StreamsBlockedFrameJSON",
		NewConnectionIdFrameJSON:     "NewConnectionIdFrameJSON",
		RetireConnectionIdJSON:       "RetireConnectionIdJSON",
		PathChallengeJSON:            "PathChallengeJSON",
		PathResponseJSON:             "PathResponseJSON",
		ConnectionCloseFrameJSON:     "ConnectionCloseFrameJSON",
		ApplicationCloseFrameJSON:    "ApplicationCloseFrameJSON",
		HandshakeDoneFrameJSON:       "HandshakeDoneFrameJSON",
	}
)

func init() {
	var v JSONType
	if _, ok := interface{}(v).(fmt.Stringer); ok {
		_JSONTypeNameToValue = map[string]JSONType{
			interface{}(InitialPacketJSON).(fmt.Stringer).String():            InitialPacketJSON,
			interface{}(RetryPacketJSON).(fmt.Stringer).String():              RetryPacketJSON,
			interface{}(StatelessResetPacketJSON).(fmt.Stringer).String():     StatelessResetPacketJSON,
			interface{}(VersionNegotiationPacketJSON).(fmt.Stringer).String(): VersionNegotiationPacketJSON,
			interface{}(HandshakePacketJSON).(fmt.Stringer).String():          HandshakePacketJSON,
			interface{}(ProtectedPacketJSON).(fmt.Stringer).String():          ProtectedPacketJSON,
			interface{}(ZeroRTTProtectedPacketJSON).(fmt.Stringer).String():   ZeroRTTProtectedPacketJSON,
			interface{}(ShortHeaderJSON).(fmt.Stringer).String():              ShortHeaderJSON,
			interface{}(LongHeaderJSON).(fmt.Stringer).String():               LongHeaderJSON,
			interface{}(PaddingFrameJSON).(fmt.Stringer).String():             PaddingFrameJSON,
			interface{}(PingFrameJSON).(fmt.Stringer).String():                PingFrameJSON,
			interface{}(AckFrameJSON).(fmt.Stringer).String():                 AckFrameJSON,
			interface{}(AckECNFrameJSON).(fmt.Stringer).String():              AckECNFrameJSON,
			interface{}(ResetStreamJSON).(fmt.Stringer).String():              ResetStreamJSON,
			interface{}(StopSendingFrameJSON).(fmt.Stringer).String():         StopSendingFrameJSON,
			interface{}(CryptoFrameJSON).(fmt.Stringer).String():              CryptoFrameJSON,
			interface{}(NewTokenFrameJSON).(fmt.Stringer).String():            NewTokenFrameJSON,
			interface{}(StreamFrameJSON).(fmt.Stringer).String():              StreamFrameJSON,
			interface{}(MaxDataFrameJSON).(fmt.Stringer).String():             MaxDataFrameJSON,
			interface{}(MaxStreamsFrameJSON).(fmt.Stringer).String():          MaxStreamsFrameJSON,
			interface{}(MaxStreamDataFrameJSON).(fmt.Stringer).String():       MaxStreamDataFrameJSON,
			interface{}(DataBlockedFrameJSON).(fmt.Stringer).String():         DataBlockedFrameJSON,
			interface{}(StreamDataBlockedFrameJSON).(fmt.Stringer).String():   StreamDataBlockedFrameJSON,
			interface{}(StreamsBlockedFrameJSON).(fmt.Stringer).String():      StreamsBlockedFrameJSON,
			interface{}(NewConnectionIdFrameJSON).(fmt.Stringer).String():     NewConnectionIdFrameJSON,
			interface{}(RetireConnectionIdJSON).(fmt.Stringer).String():       RetireConnectionIdJSON,
			interface{}(PathChallengeJSON).(fmt.Stringer).String():            PathChallengeJSON,
			interface{}(PathResponseJSON).(fmt.Stringer).String():             PathResponseJSON,
			interface{}(ConnectionCloseFrameJSON).(fmt.Stringer).String():     ConnectionCloseFrameJSON,
			interface{}(ApplicationCloseFrameJSON).(fmt.Stringer).String():    ApplicationCloseFrameJSON,
			interface{}(HandshakeDoneFrameJSON).(fmt.Stringer).String():       HandshakeDoneFrameJSON,
		}
	}
}

// MarshalJSON is generated so JSONType satisfies json.Marshaler.
func (r JSONType) MarshalJSON() ([]byte, error) {
	if s, ok := interface{}(r).(fmt.Stringer); ok {
		return json.Marshal(s.String())
	}
	s, ok := _JSONTypeValueToName[r]
	if !ok {
		return nil, fmt.Errorf("invalid JSONType: %d", r)
	}
	return json.Marshal(s)
}

// UnmarshalJSON is generated so JSONType satisfies json.Unmarshaler.
func (r *JSONType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("JSONType should be a string, got %s", data)
	}
	v, ok := _JSONTypeNameToValue[s]
	if !ok {
		return fmt.Errorf("invalid JSONType %q", s)
	}
	*r = v
	return nil
}
